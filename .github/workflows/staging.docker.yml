name: Staging
on:
    workflow_dispatch: # allows requesting workflow manually from the website
    push:
        branches:
            - main
# on:
#     push:
#         tags:
#             - '*.*.*' # Triggers on version tags like v1.0.0
jobs:
    sonarqube:
        runs-on: ubuntu-latest
        
        steps:
        - uses: actions/checkout@v4
          with:
            # Disabling shallow clones is recommended for improving the relevancy of reporting
            fetch-depth: 0
        - name: SonarQube Scan
          uses: SonarSource/sonarqube-scan-action@v5.2.0 # Ex: v4.1.0, See the latest version at https://github.com/marketplace/actions/official-sonarqube-scan
          env:
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
            SONAR_HOST_URL: https://sonarcloud.io # ${{ vars.SONAR_HOST_URL }}
    
    build:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2

            - name: Log in to GitHub Container Registry
              uses: docker/login-action@v2
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.ACCESS_TOKEN }} # use personal access token

            - name: Extract version from package.json
              id: extract_version
              run: echo "VERSION=$(jq -r '.version' package.json)" >> $GITHUB_ENV

            - name: Build and push Docker image
              uses: docker/build-push-action@v4
              with:
                  context: .
                  # platforms: linux/amd64,linux/arm64
                  push: true
                  tags: |
                      ghcr.io/${{ github.repository_owner }}/helldivers1api:staging
                  build-args: |
                      NODE_ENV=staging

            - name: Cleanup untagged packages (when you create a new :staging, the old one remains available)
              uses: snok/container-retention-policy@v3.0.0
              with:
                  account: user
                  token: ${{ secrets.ACCESS_TOKEN }}
                  image-names: 'helldivers1api'
                  tag-selection: untagged # delete all untagged images
                  # image-tags: "test* dev*"  # target any image that has a tag starting with the word test or dev
                  cut-off: 30min
                  dry-run: true
