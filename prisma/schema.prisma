// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// generator client {
//   provider = "prisma-client-js" 
//   output   = "../src/generated/prisma" //will be required in future release anyway
//   binaryTargets = ["native", "darwin-arm64", "linux-musl-arm64-openssl-3.0.x", "linux-musl-openssl-3.0.x"] //read https://www.prisma.io/docs/orm/reference/prisma-schema-reference#binarytargets-options
// }

// #region Initialize
datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}
generator client {
  provider = "prisma-client"  //read https://www.prisma.io/docs/orm/prisma-schema/overview/generators#prisma-client-early-access
  output   = "../src/generated/prisma"
  binaryTargets = ["native", "darwin-arm64", "linux-musl-arm64-openssl-3.0.x", "linux-musl-openssl-3.0.x"] //read https://www.prisma.io/docs/orm/reference/prisma-schema-reference#binarytargets-options
  //native - the default, when not(hing) specified
  //darwin-arm64 - for Apple Silicon (M1) Macs
  //linux-musl-arm64-openssl-3.0.x - for Alpine Linux (on MacOS)
  //linux-musl-openssl-3.0.x - for Alpine Linux (on AMD64)
}
// #endregion

// #region Configuration
model App {
    id String @id @default(uuid(7))
    version String
    // is_db_initialized Boolean @default(false)
    active_season Int @default(0)
    // last_updated_status  DateTime
    // last_updated_season  DateTime
    // settings Json
}
// #endregion

// #region Authentication & Authorization - NextAuth (Auth.js)  
model Account {
  id                       String  @id @default(uuid(7))
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@unique([provider, providerAccountId])
  @@index([userId])
}
 
model Session {
  id           String   @id @default(uuid(7))
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@index([userId])
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model User {
  id            String          @id @default(uuid(7))
  name          String?
  username      String?         @unique // take their discord username instead?
  email         String?         @unique
  emailVerified DateTime?       //verify email
  image         String?         //show button in dashboard "use gravatar", it will load in the gravatar and they can then save it, which will write to this field.
  role          String          @default("user")
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[] // Optional for WebAuthn support
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  
  //custom relations 
  settings Settings?
  posts Post[]
  apiKeys ApiKey[]
}
// #endregion

// #region User
model Settings {
    // id String @id @default(uuid(7))
    userId String @id @unique
    settings Json
    //relations
    user User @relation(fields: [userId], references: [id])
}

model Post {
  id        String     @id @default(uuid(7))
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  content   String?
  published Boolean @default(false)
  authorId  String
  author    User @relation(fields: [authorId], references: [id])
}

model ApiKey {
    id          String @id @default(uuid(7)) //also used as the key
    hash        String @unique //md5 hash of the key
    visible     String //last 4 characters of the actual key for display purposes.
    userId      String
    description String
    
    createdAt   DateTime @default(now())
    enabled     Boolean @default(true)
    //relations
    user User @relation(fields: [userId], references: [id])
}
// #endregion

// #region REBROADCAST
model rebroadcast_status {
    id   String @id @default(uuid(7))
    season Int @unique
    last_updated DateTime @default(now())
    json Json
}
model rebroadcast_snapshot {
    id   String @id @default(uuid(7))
    season Int @unique
    last_updated DateTime @default(now())
    json Json
}
// #endregion

// #region HELLDIVERS
model h1_season {
  id                 String     @id @default(uuid(7))
//   is_active          Boolean    @default(false)
  last_updated       DateTime?            
  season             Int        @unique
  //relationships
  introduction_order h1_introduction_order? @relation("OneSeasonToOneIntroductionOrder") //a season must have 1 introduction_order, and an introduction_order must always be linked to a season
  points_max         h1_points_max?         @relation("OneSeasonToOnePointsMax") //a season must have 1 points_max, and a points_max must always be linked to a season
  campaigns          h1_campaign[]          @relation("OneSeasonToManyCampaigns")
  snapshots          h1_snapshot[]          @relation("OneSeasonToManySnapshots")
  defend_events      h1_defend_event[]      @relation("OneSeasonToManyDefendEvents")
  attack_events      h1_attack_event[]      @relation("OneSeasonToManyAttackEvents")
  events             h1_events[]            @relation("OneSeasonToManyEvents")
  statistics         h1_statistic[]         @relation("OneSeasonToManyStatistics")
  //indexes
  @@index([season])
//   @@index([is_active])
  @@index([last_updated])
//   @@index([is_active, last_updated])
}

model h1_campaign {
  //get_campaign_status -> "campaign_status"
  id   String @id @default(uuid(7))
  season Int //foreign key
  points Int
  points_taken Int
  points_max Int
  status String
  introduction_order Int
  //relationship
  linked_season h1_season @relation("OneSeasonToManyCampaigns", fields: [season], references: [season])
  //other
  @@unique([season, introduction_order]) //unique
  @@index([season, introduction_order]) //index
  @@index([season]) //index
}

model h1_introduction_order {
  id            String @id @default(uuid(7))
  season        Int    @unique //foreign key //only one introduction_order per season, hence unique. enforces one-to-one relationship
  order         Int[] //stores the order as a native PostGres Int Array
  json          Json //stores the order in JSON //raw data from api
  //relationship
  linked_season h1_season @relation("OneSeasonToOneIntroductionOrder", fields: [season], references: [season])
  //indexes
  @@index([season])
}

model h1_points_max {
  id            String @id @default(uuid(7))
  season        Int    @unique //foreign key //only one points_max per season, hence unique. enforces one-to-one relationship
  points        Int[] //stores the points_max as a native PostGres Int Array
  json          Json //original raw data
  //relationship
  linked_season h1_season @relation("OneSeasonToOnePointsMax", fields: [season], references: [season])
  //indexes
  @@index([season])
}

model h1_snapshot {
    id            String @id @default(uuid(7))
    season        Int    //foreign key //multiple snapshots per season, hence NOT unique. enforces one-to-many relationship
    time          Int    //original value 
    data          Json   //data field
    json          Json   //original raw data
    //relationship
    linked_season h1_season @relation("OneSeasonToManySnapshots", fields: [season], references: [season])
    //indexes
    @@unique([season, time]) //unique
    @@index([season, time]) //index
    @@index([season]) //index
}

model h1_defend_event {
  id               String @id @default(uuid(7))
  season           Int // foreign key
  //data
  event_id         Int @unique
  start_time       Int
  end_time         Int
  region           Int
  enemy            Int
  points_max       Int
  points           Int
  status           String
  players_at_start Int?
  //relationship
  linked_season h1_season @relation("OneSeasonToManyDefendEvents", fields: [season], references: [season])
  //indexes
  @@index([event_id])
}

model h1_attack_event {
  id               String @id @default(uuid(7))
  season           Int //foreign key
  //data
  event_id         Int @unique
  start_time       Int
  end_time         Int
  enemy            Int
  points_max       Int
  points           Int
  status           String
  players_at_start Int?
  //relationship
  linked_season h1_season @relation("OneSeasonToManyAttackEvents", fields: [season], references: [season])
  //indexes
  @@index([event_id])
}

model h1_event {
  id               String @id @default(uuid(7))
  season           Int // foreign key
  type             String //attack or defend
  //data
  event_id         Int @unique
  start_time       Int
  end_time         Int
  region           Int //fill out for defend, automatic "11" for attack
  enemy            Int
  points_max       Int
  points           Int
  status           String
  players_at_start Int?
  
  //relationship
  linked_season h1_season @relation("OneSeasonToManyEvents", fields: [season], references: [season])
  //indexes
  @@index([event_id])
}

model h1_statistic {
  id                       String @id @default(uuid(7))
  season                   Int //foreign key
  season_duration          Int
  enemy                    Int
  players                  Int
  total_unique_players     Int
  missions                 Int
  successful_missions      Int
  total_mission_difficulty Int
  completed_planets        Int
  defend_events            Int
  successful_defend_events Int
  attack_events            Int
  successful_attack_events Int
  deaths                   BigInt
  kills                    BigInt
  accidentals              BigInt
  shots                    BigInt
  hits                     BigInt

  //relations
  linked_season h1_season? @relation("OneSeasonToManyStatistics", fields: [season], references: [season])
  //other
  @@unique([season, enemy]) //unique
  @@index([season, enemy]) //index
  @@index([season]) //index
}



// #endregion